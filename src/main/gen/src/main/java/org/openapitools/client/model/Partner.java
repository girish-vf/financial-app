/*
 * com_my_financial_app API
 * com_my_financial_app API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Partner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-01T19:34:10.510748+02:00[Europe/Berlin]")
public class Partner {
  public static final String SERIALIZED_NAME_ID = "_id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Object id = null;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Object type = null;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private Object firstName = null;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private Object lastName = null;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private Object email = null;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Object status = null;

  public static final String SERIALIZED_NAME_CONTACT_NO = "contactNo";
  @SerializedName(SERIALIZED_NAME_CONTACT_NO)
  private Object contactNo = null;

  public static final String SERIALIZED_NAME_OPENING_BALANCE = "openingBalance";
  @SerializedName(SERIALIZED_NAME_OPENING_BALANCE)
  private Object openingBalance = null;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Object address = null;

  public static final String SERIALIZED_NAME_REP_NAME = "repName";
  @SerializedName(SERIALIZED_NAME_REP_NAME)
  private Object repName = null;

  public static final String SERIALIZED_NAME_REP_CONTACT = "repContact";
  @SerializedName(SERIALIZED_NAME_REP_CONTACT)
  private Object repContact = null;

  public static final String SERIALIZED_NAME_REP_DESIGNATION = "repDesignation";
  @SerializedName(SERIALIZED_NAME_REP_DESIGNATION)
  private Object repDesignation = null;

  public Partner() {
  }

  public Partner id(Object id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getId() {
    return id;
  }


  public void setId(Object id) {
    this.id = id;
  }


  public Partner type(Object type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getType() {
    return type;
  }


  public void setType(Object type) {
    this.type = type;
  }


  public Partner firstName(Object firstName) {
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getFirstName() {
    return firstName;
  }


  public void setFirstName(Object firstName) {
    this.firstName = firstName;
  }


  public Partner lastName(Object lastName) {
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getLastName() {
    return lastName;
  }


  public void setLastName(Object lastName) {
    this.lastName = lastName;
  }


  public Partner email(Object email) {
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getEmail() {
    return email;
  }


  public void setEmail(Object email) {
    this.email = email;
  }


  public Partner status(Object status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getStatus() {
    return status;
  }


  public void setStatus(Object status) {
    this.status = status;
  }


  public Partner contactNo(Object contactNo) {
    
    this.contactNo = contactNo;
    return this;
  }

   /**
   * Get contactNo
   * @return contactNo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getContactNo() {
    return contactNo;
  }


  public void setContactNo(Object contactNo) {
    this.contactNo = contactNo;
  }


  public Partner openingBalance(Object openingBalance) {
    
    this.openingBalance = openingBalance;
    return this;
  }

   /**
   * Get openingBalance
   * @return openingBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getOpeningBalance() {
    return openingBalance;
  }


  public void setOpeningBalance(Object openingBalance) {
    this.openingBalance = openingBalance;
  }


  public Partner address(Object address) {
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getAddress() {
    return address;
  }


  public void setAddress(Object address) {
    this.address = address;
  }


  public Partner repName(Object repName) {
    
    this.repName = repName;
    return this;
  }

   /**
   * Get repName
   * @return repName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getRepName() {
    return repName;
  }


  public void setRepName(Object repName) {
    this.repName = repName;
  }


  public Partner repContact(Object repContact) {
    
    this.repContact = repContact;
    return this;
  }

   /**
   * Get repContact
   * @return repContact
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getRepContact() {
    return repContact;
  }


  public void setRepContact(Object repContact) {
    this.repContact = repContact;
  }


  public Partner repDesignation(Object repDesignation) {
    
    this.repDesignation = repDesignation;
    return this;
  }

   /**
   * Get repDesignation
   * @return repDesignation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getRepDesignation() {
    return repDesignation;
  }


  public void setRepDesignation(Object repDesignation) {
    this.repDesignation = repDesignation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Partner partner = (Partner) o;
    return Objects.equals(this.id, partner.id) &&
        Objects.equals(this.type, partner.type) &&
        Objects.equals(this.firstName, partner.firstName) &&
        Objects.equals(this.lastName, partner.lastName) &&
        Objects.equals(this.email, partner.email) &&
        Objects.equals(this.status, partner.status) &&
        Objects.equals(this.contactNo, partner.contactNo) &&
        Objects.equals(this.openingBalance, partner.openingBalance) &&
        Objects.equals(this.address, partner.address) &&
        Objects.equals(this.repName, partner.repName) &&
        Objects.equals(this.repContact, partner.repContact) &&
        Objects.equals(this.repDesignation, partner.repDesignation);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, firstName, lastName, email, status, contactNo, openingBalance, address, repName, repContact, repDesignation);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Partner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    contactNo: ").append(toIndentedString(contactNo)).append("\n");
    sb.append("    openingBalance: ").append(toIndentedString(openingBalance)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    repName: ").append(toIndentedString(repName)).append("\n");
    sb.append("    repContact: ").append(toIndentedString(repContact)).append("\n");
    sb.append("    repDesignation: ").append(toIndentedString(repDesignation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_id");
    openapiFields.add("type");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("email");
    openapiFields.add("status");
    openapiFields.add("contactNo");
    openapiFields.add("openingBalance");
    openapiFields.add("address");
    openapiFields.add("repName");
    openapiFields.add("repContact");
    openapiFields.add("repDesignation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("firstName");
    openapiRequiredFields.add("lastName");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("contactNo");
    openapiRequiredFields.add("openingBalance");
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("repName");
    openapiRequiredFields.add("repContact");
    openapiRequiredFields.add("repDesignation");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Partner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Partner.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Partner is not found in the empty JSON string", Partner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Partner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Partner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Partner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Partner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Partner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Partner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Partner.class));

       return (TypeAdapter<T>) new TypeAdapter<Partner>() {
           @Override
           public void write(JsonWriter out, Partner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Partner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Partner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Partner
  * @throws IOException if the JSON string is invalid with respect to Partner
  */
  public static Partner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Partner.class);
  }

 /**
  * Convert an instance of Partner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

